{
  "0": {
    "date": "13.10.2024 15:22",
    "student": "Реал",
    "module": "Зачетная работа по модулю №5  JS: база+",
    "task": "Зачетная работа по модулю №5 \" JS: база+\"\n\n\nВаша задача:\n\n\n\nСоздать программу на JavaScript, которая позволит пользователю управлять списком задач. Программа должна уметь:\n\nдобавлять задачи,\n\nпомечать задачи как выполненные,\n\nудалять задачи,\n\nотображать все задачи с их статусом (выполнена или нет).\n\nШаги:\n\nСоздание списка задач:\n\nВаша программа должна использовать массив для хранения списка задач.\n\nКаждая задача должна быть объектом с двумя полями:\n\nназвание задачи (name), которое будет строкой;\n\nстатус задачи (completed), который будет булевым значением (true или false). Статус показывает, выполнена задача или нет.\n\nДобавление новой задачи:\n\nВам нужно реализовать функцию, которая будет добавлять новую задачу в список.\n\nФункция должна принимать название задачи и добавлять её в массив задач со статусом \"не выполнено\" (completed: false).\n\nЕсли пользователь попытается добавить задачу с пустым названием, нужно вывести сообщение о том, что название задачи не может быть пустым.\n\nПометка задачи как выполненной:\n\nНеобходимо создать функцию, которая будет изменять статус задачи. Когда пользователь выполнит задачу, эта функция должна находить задачу по её названию в списке и менять её статус на completed: true (то есть отметить задачу как выполненную).\n\nЕсли задачи с таким названием в списке нет, программа должна сообщить об этом.\n\nУдаление задачи:\n\nПрограмма должна уметь удалять задачу из списка.\n\nРеализуйте функцию, которая удаляет задачу по её названию. Если задача найдена, она удаляется из массива. Если задачи с таким названием нет, программа должна вывести сообщение о том, что задача не найдена.\n\nОтображение всех задач:\n\nНапишите функцию, которая выводит все задачи в списке. Для каждой задачи нужно показать её название и статус — выполнена она или нет.\n\nЕсли задача выполнена, выведите, что она \"Выполнена\". Если не выполнена, выведите, что она \"Не выполнена\".\n\nПример взаимодействия:\n\nПользователь добавляет задачу \"Выучить JavaScript\".\n\nПользователь помечает задачу \"Купить продукты\" как выполненную.\n\nПользователь удаляет задачу \"Сделать домашнее задание\".\n\nПрограмма выводит список всех задач с указанием их статуса.\n\nРезультат:После выполнения задания, ваша программа будет готова к управлению простым списком задач, позволяя добавлять, удалять и обновлять задачи, а также отображать текущее\n\n",
    "filepath": "https://tupwidget.com/41679aac02d1e95e3ee5a1ace8722dcf/homeWork_tilda34148314.zip",
    "filepathDock": "https://drive.google.com/open?id=1hZ6XdaNlHT5ZJSyCSkW3hporHNNwNkd9"
  },
  "1": {
    "date": "16.10.2024 15:40",
    "student": "Виктория",
    "module": "Зачетная работа по модулю №5  JS: база+",
    "task": "Зачетная работа по модулю №5 \" JS: база+\"\n\n\nВаша задача:\n\n\n\nСоздать программу на JavaScript, которая позволит пользователю управлять списком задач. Программа должна уметь:\n\nдобавлять задачи,\n\nпомечать задачи как выполненные,\n\nудалять задачи,\n\nотображать все задачи с их статусом (выполнена или нет).\n\nШаги:\n\nСоздание списка задач:\n\nВаша программа должна использовать массив для хранения списка задач.\n\nКаждая задача должна быть объектом с двумя полями:\n\nназвание задачи (name), которое будет строкой;\n\nстатус задачи (completed), который будет булевым значением (true или false). Статус показывает, выполнена задача или нет.\n\nДобавление новой задачи:\n\nВам нужно реализовать функцию, которая будет добавлять новую задачу в список.\n\nФункция должна принимать название задачи и добавлять её в массив задач со статусом \"не выполнено\" (completed: false).\n\nЕсли пользователь попытается добавить задачу с пустым названием, нужно вывести сообщение о том, что название задачи не может быть пустым.\n\nПометка задачи как выполненной:\n\nНеобходимо создать функцию, которая будет изменять статус задачи. Когда пользователь выполнит задачу, эта функция должна находить задачу по её названию в списке и менять её статус на completed: true (то есть отметить задачу как выполненную).\n\nЕсли задачи с таким названием в списке нет, программа должна сообщить об этом.\n\nУдаление задачи:\n\nПрограмма должна уметь удалять задачу из списка.\n\nРеализуйте функцию, которая удаляет задачу по её названию. Если задача найдена, она удаляется из массива. Если задачи с таким названием нет, программа должна вывести сообщение о том, что задача не найдена.\n\nОтображение всех задач:\n\nНапишите функцию, которая выводит все задачи в списке. Для каждой задачи нужно показать её название и статус — выполнена она или нет.\n\nЕсли задача выполнена, выведите, что она \"Выполнена\". Если не выполнена, выведите, что она \"Не выполнена\".\n\nПример взаимодействия:\n\nПользователь добавляет задачу \"Выучить JavaScript\".\n\nПользователь помечает задачу \"Купить продукты\" как выполненную.\n\nПользователь удаляет задачу \"Сделать домашнее задание\".\n\nПрограмма выводит список всех задач с указанием их статуса.\n\nРезультат:После выполнения задания, ваша программа будет готова к управлению простым списком задач, позволяя добавлять, удалять и обновлять задачи, а также отображать текущее\n\n",
    "filepath": "https://tupwidget.com/47de11faa01214c06cbc1df1c0ed324c/web%20practiceJS%20%D0%B1%D0%B0%D0%B7%D0%B0%2Bh1_tilda34149624.zip",
    "filepathDock": "https://drive.google.com/open?id=1poP8mhSTthf29455_aHYQIDWbKp9xgRR"
  },
  "2": {
    "date": "16.10.2024 16:18",
    "student": "Альфия",
    "module": "Зачетная работа по модулю №4 JS.База",
    "task": "Зачетная работа по модулю №4 \"JS.База\"\n\n\nВаша задача:\n\n\nСоздайте переменную с именем myName и присвойте ей ваше имя. Затем напишите функцию greet(), которая выводит приветствие с вашим именем\n\n\nНапиши функцию celsiusToFahrenheit , которая принимает температуру в градусах Цельсия и возвращает её эквивалент в градусах Фаренгейта\n\n\nНапишите функцию calculateFallDistance(), которая принимает время падения объекта в секундах и возвращает расстояние, которое объект пролетел за это время, учитывая скорость свободного падения (g), равную 9.8 м/с²\nФормула для расчета расстояния падения: d = (1/2) * g * t^2\n\n\nНапишите функцию calculateAverage(), которая принимает три числа в качестве аргументов и возвращает их среднее значение\n\n\nНапишите функцию concatStrings(), которая принимает два слова и возвращает строку “Первое слово - «‎ » , второе слово - «‎  » “\n\nКаждое задание должно быть оформлено в качестве модуля и вызываться в одном файле script.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "filepath": "https://tupwidget.com/b10a9764380b6d602fede21dbdf1b611/domashka4_tilda34152852.zip",
    "filepathDock": "https://drive.google.com/open?id=1kuPQRq98AYEDLqNiag6ISs5saXOmTOEs"
  },
  "3": {
    "date": "16.10.2024 23:08",
    "student": "Александр",
    "module": "Зачетная работа по модулю №5  JS: база+",
    "task": "Зачетная работа по модулю №5 \" JS: база+\"\n\n\nВаша задача:\n\n\n\nСоздать программу на JavaScript, которая позволит пользователю управлять списком задач. Программа должна уметь:\n\nдобавлять задачи,\n\nпомечать задачи как выполненные,\n\nудалять задачи,\n\nотображать все задачи с их статусом (выполнена или нет).\n\nШаги:\n\nСоздание списка задач:\n\nВаша программа должна использовать массив для хранения списка задач.\n\nКаждая задача должна быть объектом с двумя полями:\n\nназвание задачи (name), которое будет строкой;\n\nстатус задачи (completed), который будет булевым значением (true или false). Статус показывает, выполнена задача или нет.\n\nДобавление новой задачи:\n\nВам нужно реализовать функцию, которая будет добавлять новую задачу в список.\n\nФункция должна принимать название задачи и добавлять её в массив задач со статусом \"не выполнено\" (completed: false).\n\nЕсли пользователь попытается добавить задачу с пустым названием, нужно вывести сообщение о том, что название задачи не может быть пустым.\n\nПометка задачи как выполненной:\n\nНеобходимо создать функцию, которая будет изменять статус задачи. Когда пользователь выполнит задачу, эта функция должна находить задачу по её названию в списке и менять её статус на completed: true (то есть отметить задачу как выполненную).\n\nЕсли задачи с таким названием в списке нет, программа должна сообщить об этом.\n\nУдаление задачи:\n\nПрограмма должна уметь удалять задачу из списка.\n\nРеализуйте функцию, которая удаляет задачу по её названию. Если задача найдена, она удаляется из массива. Если задачи с таким названием нет, программа должна вывести сообщение о том, что задача не найдена.\n\nОтображение всех задач:\n\nНапишите функцию, которая выводит все задачи в списке. Для каждой задачи нужно показать её название и статус — выполнена она или нет.\n\nЕсли задача выполнена, выведите, что она \"Выполнена\". Если не выполнена, выведите, что она \"Не выполнена\".\n\nПример взаимодействия:\n\nПользователь добавляет задачу \"Выучить JavaScript\".\n\nПользователь помечает задачу \"Купить продукты\" как выполненную.\n\nПользователь удаляет задачу \"Сделать домашнее задание\".\n\nПрограмма выводит список всех задач с указанием их статуса.\n\nРезультат:После выполнения задания, ваша программа будет готова к управлению простым списком задач, позволяя добавлять, удалять и обновлять задачи, а также отображать текущее\n\n",
    "filepath": "https://tupwidget.com/9c9cd0d6c00fb18884bc031b4b63b8de/JS%20%2B5%20block_tilda34148556.zip",
    "filepathDock": "https://drive.google.com/open?id=1Eo8lk1rg4LreZS1cqK4jbovtfg2b58cJ"
  },
  "4": {
    "date": "16.10.2024 23:25",
    "student": "Альбина",
    "module": "Зачетная работа по модулю №5  JS: база+",
    "task": "Зачетная работа по модулю №5 \" JS: база+\"\n\n\nВаша задача:\n\n\n\nСоздать программу на JavaScript, которая позволит пользователю управлять списком задач. Программа должна уметь:\n\nдобавлять задачи,\n\nпомечать задачи как выполненные,\n\nудалять задачи,\n\nотображать все задачи с их статусом (выполнена или нет).\n\nШаги:\n\nСоздание списка задач:\n\nВаша программа должна использовать массив для хранения списка задач.\n\nКаждая задача должна быть объектом с двумя полями:\n\nназвание задачи (name), которое будет строкой;\n\nстатус задачи (completed), который будет булевым значением (true или false). Статус показывает, выполнена задача или нет.\n\nДобавление новой задачи:\n\nВам нужно реализовать функцию, которая будет добавлять новую задачу в список.\n\nФункция должна принимать название задачи и добавлять её в массив задач со статусом \"не выполнено\" (completed: false).\n\nЕсли пользователь попытается добавить задачу с пустым названием, нужно вывести сообщение о том, что название задачи не может быть пустым.\n\nПометка задачи как выполненной:\n\nНеобходимо создать функцию, которая будет изменять статус задачи. Когда пользователь выполнит задачу, эта функция должна находить задачу по её названию в списке и менять её статус на completed: true (то есть отметить задачу как выполненную).\n\nЕсли задачи с таким названием в списке нет, программа должна сообщить об этом.\n\nУдаление задачи:\n\nПрограмма должна уметь удалять задачу из списка.\n\nРеализуйте функцию, которая удаляет задачу по её названию. Если задача найдена, она удаляется из массива. Если задачи с таким названием нет, программа должна вывести сообщение о том, что задача не найдена.\n\nОтображение всех задач:\n\nНапишите функцию, которая выводит все задачи в списке. Для каждой задачи нужно показать её название и статус — выполнена она или нет.\n\nЕсли задача выполнена, выведите, что она \"Выполнена\". Если не выполнена, выведите, что она \"Не выполнена\".\n\nПример взаимодействия:\n\nПользователь добавляет задачу \"Выучить JavaScript\".\n\nПользователь помечает задачу \"Купить продукты\" как выполненную.\n\nПользователь удаляет задачу \"Сделать домашнее задание\".\n\nПрограмма выводит список всех задач с указанием их статуса.\n\nРезультат:После выполнения задания, ваша программа будет готова к управлению простым списком задач, позволяя добавлять, удалять и обновлять задачи, а также отображать текущее\n\n",
    "filepath": "https://tupwidget.com/df7b90563c5d388b35abae5ac02f1c0c/%D0%B4%D0%B75_tilda34148982.zip",
    "filepathDock": "https://drive.google.com/open?id=1cSvOMqrSfyeiV4oNu-PvSBV8fSlk4WJY"
  },
  "5": {
    "date": "16.10.2024 23:43",
    "student": "Егор",
    "module": "Зачетная работа по модулю №7 Продвинутая верстка",
    "task": "Зачетная работа по модулю №7 \"Продвинутая верстка\"\n\n\nВаша задача:\nСоздать веб-страницу с адаптивной версткой по макету https://www.figma.com/design/EYKgZvtO2cVud0mwhPK5mm/%D0%9C%D0%BE%D0%B4%D1%83%D0%BB%D1%8C5?node-id=0-1&t=CvXUxBR2A8gUk8tN-0\n\n\nТребования к адаптивности:\nВеб-страница должна корректно отображаться на устройствах с различными размерами экранов и адекватно реагировать на изменения размеров окна браузера, при этом, верстка не должна ломаться на промежуточных размерах.\n\n\nИспользование медиа-запросов:\nНеобходимо использовать @media для адаптивного изменения стилей в зависимости от размеров экрана.\n\n\nКроссбраузерная совместимость:\nВеб-страница должна выглядеть одинаково в различных браузерах (Chrome, Firefox, Safari, Edge).\n\n\nИспользование технологий:\nРекомендуется использовать Flexbox и Grid Layout для создания гибкой и современной верстки.\n\n\nФункциональность:\nДобавьте возможность отображения мобильного меню. Реализация производится с помощью JavaScript.\n\n*Дополнительно: По желанию, можно добавить изменение темы - темная/светлая\n",
    "filepath": "https://tupwidget.com/13d4429268a91bb1bb08a1aa8b210dc9/%D0%9C%D0%BE%D0%B4%D1%83%D0%BB%D1%8C%207_tilda34149338.rar",
    "filepathDock": "https://drive.google.com/open?id=13TNgrVR8HR3hIItZp0hD_s-v5dw7OZve"
  },
  "6": {
    "date": "15.10.2024 14:14",
    "student": "Антонина",
    "module": "Практическая работа по модулю №12. Typescript. Часть 1.",
    "task": "Практическая работа по модулю №12. Typescript. Часть 1.\nAPI новостей\n\n\n\nNews API — это простой HTTP REST API для поиска и извлечения новостей из Интернета. \n\nhttps://newsapi.org/\nНужно будет сделать регистрацию и получить API key. В проекте создаем файл .env и вставляем следующие\nAPI_URL=https://newsapi.org/v2/\n\nAPI_KEY=Ваш api key\n\nКлючевые навыки\nJavaScript Classes\nModules in JavaScript\nWebpack\nTypeScript\n\n\nИсточник\nОригинальное приложение\n\n\nТребования к заданию\nСоздайте собственную копию заявления.\n\n  Добавьте TypeScript в проект.\nНастройте ESLint для работы с TypeScript.\nНастройте Webpack для работы с TypeScript.\nПеренесите приложение с JavaScript на TypeScript, используя:\nПеречисления\nИнтерфейсы\nТипы\nДженерики\nТипы союзов\nМодификаторы доступа ( private, public)\nТипы утилит ( Partial, Pick, Readonly)\nСделайте макет адаптивным с дизайном по вашему усмотрению.\nИспользование anyшрифта СТРОГО ЗАПРЕЩЕНО!\n\nТребования к макету и дизайну приложения\n\n\n Внешний вид приложения соответствует предложенному образцу или является его улучшенной версией.\nМакет адаптивный. Минимальная ширина страницы, при которой проверяется корректность отображения приложения, составляет 320px, а максимальная ширина\n\n\nПоследовательность выполнения задачи\n\n\nШаг 1: Загрузка приложения\n\nНа этом этапе мы достигли следующего:\n\nИнтегрировал TypeScript в проект, добавив пакет TypeScript npm.\nСоздал tsconfig.json файл.\nНастроил ESLint и Webpack для бесперебойной работы с TypeScript.\nРеализовал плагин typescript-eslint/recommended в ESLint.\nВаша версия приложения успешно запущена и работает.\n\n\nШаг 2: Подготовка к переносу кода на TypeScript\n\nРезультат выполнения этого шага включает в себя:\n\nПереименование файлов с расширением *.jsв файлы с расширением *.ts.\nСоздание необходимых интерфейсов для обмена данными с News API .\n\n\nШаг 3: Перенос кода на TypeScript\n\nРезультат выполнения этого шага следующий:\n\nКод строго типизирован, включая:\nОбъявление типов для всех переменных.\nВвод параметров для функций и методов, а также правильная обработка случаев, когда функции не возвращают значение.\nТипизация используемых классов.\nВ коде используются ранее созданные интерфейсы.\nСоздаются и используются перечисления, универсальные типы, типы утилит и т. д.\nФайл конфигурации TypeScript включает следующие флаги:\n\"noImplicitAny\": true\n\"strict\": true\nВ ESLint это no-explicit-anyправило включено.\n\n\nШаг 4: Адаптивная верстка\n\nРезультат выполнения этого шага:\n\nМакет сохраняет стабильность при масштабировании, гарантируя, что элементы будут адаптироваться быстро, не перекрывая друг друга и не скрываясь за пределами области просмотра.\nстраницы — 1920px.",
    "filepath": "https://github.com/AntoninaSemkina/HW_TypeScript.git"
  },
  "7": {
    "date": "17.10.2024 00:24",
    "student": "Жанна Шклудова 19-09",
    "module": "Домашнее задание по модулю Введение во FrontEnd",
    "task": "Задачи домашнего задания по модулю 1\n\n\nСоздайте файл index.html\nДобавьте на данную страницу свою фотографию\nНапишите тег div и внутри него добавьте:\nтег span “Мои лучшие качества”\nмаркированный список (ul) с Вашими лучшими качествами (не менее 5 элементов списка)\nДобавьте тег div и напишите в нем 3 ссылки на социальные сети\nДобавьте 3 кнопки:\nНаписать\nПозвонить\nОставить предложение о работе\nСоздайте вторую страницу под названием second_page\nВ начале страницы напиши тег div,  в котором будет 3 ссылки на разделы страниц:\nHTML\nCSS\nJavaScript\nДобавьте блоки про HTML, CSS и JavaScript, где информация по каждому из них будет представлена в качестве списка\nОсуществите навигацию по страницам и разделам сайта\nДобавьте переносы строк и  разделительные горизонтальные линии на своё усмотрение\n\nПримеры выполнения ниже\n",
    "filepath": "https://tupwidget.com/2773a3949ec17381ba3592b205818785/second_page_tilda34149962.html",
    "filepathDock": "https://drive.google.com/open?id=1ZRzDA8vFwnbV6eWhoHlrTlOt2Gte_85d"
  },
  "8": {
    "date": "17.10.2024 08:24",
    "student": "Александр",
    "module": "Домашнее задание по модулю Введение во FrontEnd",
    "task": "Задачи домашнего задания по модулю 1\n\n\nСоздайте файл index.html\nДобавьте на данную страницу свою фотографию\nНапишите тег div и внутри него добавьте:\nтег span “Мои лучшие качества”\nмаркированный список (ul) с Вашими лучшими качествами (не менее 5 элементов списка)\nДобавьте тег div и напишите в нем 3 ссылки на социальные сети\nДобавьте 3 кнопки:\nНаписать\nПозвонить\nОставить предложение о работе\nСоздайте вторую страницу под названием second_page\nВ начале страницы напиши тег div,  в котором будет 3 ссылки на разделы страниц:\nHTML\nCSS\nJavaScript\nДобавьте блоки про HTML, CSS и JavaScript, где информация по каждому из них будет представлена в качестве списка\nОсуществите навигацию по страницам и разделам сайта\nДобавьте переносы строк и  разделительные горизонтальные линии на своё усмотрение\n\nПримеры выполнения ниже\n",
    "filepath": "https://tupwidget.com/79bf5d808b6ab564b6a9c073a13ea8c4/live_tilda34153942.zip",
    "filepathDock": "https://drive.google.com/open?id=1hjzoRvm7wgbtiJeMwclqx31F0jxdFep5"
  },
  "9": {
    "date": "15.10.2024 21:29",
    "student": "Олег",
    "module": "Зачетная работа по модулю №6 Терминал, git",
    "task": "Зачетная работа по модулю №6 \"Терминал, git\"\n\n\nЗарегистрироваться на GITHUB\nСоздать новый репозиторий под любым названием.\nСтавим статус публичный.\nСтягиваем созданный репозиторий к себе на локальную машину в любую директорию.\nПри желании создаем новую ветку либо остаемся на основной ветке main\nСоздаем в локальном стянутом репозитории базовые файлы (index.html / css/style.css).\nРеализуем любую структуру верстки.\nПосле реализации коммитим изменения и пушим на удаленный репозиторий\nПосле прикрепляем ссылку на ваш репозиторий на платформу к модулю GIT.",
    "filepath": "https://github.com/Mik0si/homework_6"
  }
}